package o04.jdbc;

public class O1CreateTable {

	/*
	 * 
	 * Une base de données relationnelle est une base de données (ensemble de tables) + des
	 * éventuelles relations entre les tables
	 * relations :
	 * - one-to-one : un objet de type A est associé à un et un seul objet de type B et
	 * inversement.
	 * Par exemple : un crâne est associé à un seul cerveau. 
	 * - one-to-many / many-to-one : une entreprise a plusieurs employés, mais un employé 
	 * est associé à une seule entreprise
	 * - many-to-many : un panier de course est lié à plusieurs produits, et un produit
	 * peut faire parti de plusieurs paniers de course
	 * 
	 * pour effectuer ses relations, mais aussi pour identifier chaque élément de manière unique
	 * on utilise un système de clé primaire (id), ou étrangère.
	 * 
	 * Pour communiquer avec la base de données : on utilise le SQL (structured query langage)
	 * Pourquoi structuré ? Toutes les lignes d'une table on forcément les même colonnes
	 * (potentiellement null)
	 * Quand on fait du big data (analyse de données en très grande quantité), on peut utiliser
	 * des bases non structurées et on a besoin d'utiliser dautres langages pour communiquer
	 * 
	 * Il existe plusieurs SGBD (système de gestion de base de données) mySql, SqlServer,
	 * mariaDb, postGreSql,...
	 * 
	 * JDBC : Java DataBase Connectivity - une API qui permet un accès aux base données, quel
	 * que soit le SGBD utilisé
	 * 
	 * Installation de PostGreSQL (utilisé dans cette formation)
	 * 
	 * Ces classes sont regroupées dans un package, java.sql et incluses dans le jdk
	 * Essentiellement, ce sont des interfaces
	 * 
	 * Pour pouvoir utiliser JDBC, il faut un pilote qui est spécifique à la base de données
	 * à laquelle on veut accéder. Le pilote va être constitué de classes implémentant ces
	 * interfaces. Elles sont en général développées par le concepteur de la base de données
	 * 
	 * Installation du driver
	 * 
	 * A voir : Méthodologie pour mettre en place : technique/méthode Merise
	 * 
	 */
	public static void main(String[] args) {
		

	}

}
